/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package papeleria;

import java.sql.*;
import javax.swing.*;
import com.itextpdf.text.*;
import com.itextpdf.text.pdf.*;
import com.itextpdf.text.pdf.draw.LineSeparator;
import java.io.File;
import java.io.FileOutputStream;
import java.text.SimpleDateFormat;
import java.util.Properties;
import javax.activation.DataHandler;
import javax.activation.DataSource;
import javax.activation.FileDataSource;
import javax.mail.*;
import javax.mail.internet.*;

/**
 *
 * @author julia
 */
public class PedidoF extends CenteredFrame {

    /**
     * Creates new form PedidoF
     */
    public PedidoF() {
        initComponents();
        cargarProveedores();
        cargarProductos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        Regresarbutt = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        RealizarPed = new javax.swing.JButton();
        comboBoxProveedores = new javax.swing.JComboBox<>();
        cantidadTextField = new javax.swing.JTextField();
        comboBoxProductos = new javax.swing.JComboBox<>();
        jPanel1 = new javax.swing.JPanel();
        VerHisPed = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        tareasPanel = new componentelistatareas.ListaTareas();
        jLabel6 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel3.setBackground(new java.awt.Color(0, 153, 255));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Regresarbutt.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        Regresarbutt.setText("Regresar");
        Regresarbutt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RegresarbuttActionPerformed(evt);
            }
        });
        jPanel3.add(Regresarbutt, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 10, -1, -1));

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Thepaim2_1.png"))); // NOI18N
        jPanel3.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, -1, -1));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setForeground(new java.awt.Color(24, 143, 202));

        RealizarPed.setBackground(new java.awt.Color(0, 102, 255));
        RealizarPed.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        RealizarPed.setForeground(new java.awt.Color(255, 255, 255));
        RealizarPed.setText("Realizar Pedido");
        RealizarPed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RealizarPedActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(0, 102, 255));

        VerHisPed.setBackground(new java.awt.Color(0, 102, 255));
        VerHisPed.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        VerHisPed.setForeground(new java.awt.Color(255, 255, 255));
        VerHisPed.setText("Ver historial");
        VerHisPed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VerHisPedActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel8.setText("Pedido");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(VerHisPed)
                .addGap(147, 147, 147))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 43, Short.MAX_VALUE)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(VerHisPed)
                .addGap(24, 24, 24))
        );

        tareasPanel.setBackground(new java.awt.Color(255, 255, 255));
        tareasPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        tareasPanel.setBorrarButtonText("Eliminar pedidos recibidos");
        tareasPanel.setTitle("Lista de pedidos");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(comboBoxProveedores, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(comboBoxProductos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(cantidadTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(91, 91, 91)
                        .addComponent(tareasPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 438, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(RealizarPed))
                .addContainerGap(92, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 57, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(comboBoxProductos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(comboBoxProveedores, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(cantidadTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11))
                    .addComponent(tareasPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16)
                .addComponent(RealizarPed)
                .addGap(19, 19, 19))
        );

        jPanel3.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, -4, 720, 380));

        jLabel6.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel6.setText("Cantidad");
        jPanel3.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 260, -1, 37));

        jLabel9.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel9.setText("Producto");
        jPanel3.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 160, -1, 37));

        jLabel10.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel10.setText("Producto");
        jPanel3.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 160, -1, 37));

        jLabel11.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel11.setText("Proovedor");
        jPanel3.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 210, -1, 37));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void RegresarbuttActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RegresarbuttActionPerformed
        MenuEmpleado vf = new MenuEmpleado();
        vf.setVisible(true); // Mostrar el frame de MenuGerente
        this.dispose(); // Cerrar el frame actual
    }//GEN-LAST:event_RegresarbuttActionPerformed

    private void RealizarPedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RealizarPedActionPerformed
        // Obtener el proveedor seleccionado
        Proveedor proveedorSeleccionado = (Proveedor) comboBoxProveedores.getSelectedItem();
        if (proveedorSeleccionado == null) {
            JOptionPane.showMessageDialog(this, "Por favor, seleccione un proveedor.");
            return;
        }

        int idProveedor = proveedorSeleccionado.getId_prov(); // Obtener el ID del proveedor
        String estado = "Pendiente"; // Estado inicial del pedido
        java.util.Date fechaActual = new java.util.Date(); // Fecha actual
        java.sql.Date fechaPedido = new java.sql.Date(fechaActual.getTime()); // Convertir a java.sql.Date

        // Obtener el producto seleccionado
        Producto productoSeleccionado = (Producto) comboBoxProductos.getSelectedItem();
        if (productoSeleccionado == null) {
            JOptionPane.showMessageDialog(this, "Por favor, seleccione un producto.");
            return;
        }

        int idProducto = productoSeleccionado.getId_prod(); // Obtener el ID del producto
        String cantidadStr = cantidadTextField.getText(); // Obtener la cantidad del producto

        if (cantidadStr.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, ingrese la cantidad del producto.");
            return;
        }

        try {
            int cantidad = Integer.parseInt(cantidadStr);
            String url = "jdbc:postgresql://localhost:5432/Papeleria";
            String user = "postgres";
            String password = "9656";

            // Conexión a la base de datos
            Connection con = DriverManager.getConnection(url, user, password);
            con.setAutoCommit(false); // Iniciar transacción

            // Cambiar el esquema de búsqueda
            Statement stmtSchema = con.createStatement();
            stmtSchema.execute("SET search_path TO ciber_action");
            stmtSchema.close();

            // Consulta SQL para insertar un nuevo pedido
            String sqlPedido = "INSERT INTO Pedido (Id_prov, Estado, Fecha_P) VALUES (?, ?, ?)";
            PreparedStatement stmtPedido = con.prepareStatement(sqlPedido, Statement.RETURN_GENERATED_KEYS);

            // Establecer los valores de los parámetros
            stmtPedido.setInt(1, idProveedor);
            stmtPedido.setString(2, estado);
            stmtPedido.setDate(3, fechaPedido);

            // Ejecutar la consulta de inserción del pedido
            int rowsInserted = stmtPedido.executeUpdate();

            if (rowsInserted > 0) {
                // Obtener el ID del pedido recién insertado
                ResultSet generatedKeys = stmtPedido.getGeneratedKeys();
                if (generatedKeys.next()) {
                    int idPedido = generatedKeys.getInt(1); // Obtener el ID del nuevo pedido

                    // Calcular el monto total (obtener el precio del producto)
                    String sqlProducto = "SELECT Precio FROM Producto WHERE Id_prod = ?";
                    PreparedStatement stmtProducto = con.prepareStatement(sqlProducto);
                    stmtProducto.setInt(1, idProducto); // Cambiar a idProducto
                    ResultSet rsProducto = stmtProducto.executeQuery();

                    if (rsProducto.next()) {
                        double precio = rsProducto.getDouble("Precio");
                        double montoTotal = precio * cantidad; // Calcular el monto total

                        // Consulta SQL para insertar en Detalle_Pedido
                        String sqlDetalle = "INSERT INTO Detalle_Pedido (Id_pedido, Id_prod, Cantidad, Monto_total) VALUES (?, ?, ?, ?)";
                        PreparedStatement stmtDetalle = con.prepareStatement(sqlDetalle);
                        stmtDetalle.setInt(1, idPedido);
                        stmtDetalle.setInt(2, idProducto);
                        stmtDetalle.setInt(3, cantidad);
                        stmtDetalle.setDouble(4, montoTotal);

                        // Ejecutar la consulta de inserción del detalle
                        stmtDetalle.executeUpdate();
                        stmtDetalle.close();

                        String sqlTarea = "INSERT INTO Tareas (Id_pedido, Nombre) VALUES (?, ?)";
                        PreparedStatement stmtTarea = con.prepareStatement(sqlTarea);
                        stmtTarea.setInt(1, idPedido);
                        stmtTarea.setString(2, "Pedido ID: " + idPedido + " - Proveedor: " + proveedorSeleccionado.getNombre() + " - Producto: " + productoSeleccionado.getNombre() + " - Cantidad: " + cantidad);

                        // Ejecutar la consulta de inserción de la tarea
                        stmtTarea.executeUpdate();
                        stmtTarea.close();
                        // Obtener el correo del proveedor
                        String sqlProveedor = "SELECT Correo_e FROM Proveedor WHERE Id_prov = ?";
                        PreparedStatement stmtProveedor = con.prepareStatement(sqlProveedor);
                        stmtProveedor.setInt(1, idProveedor); // Obtener el correo del proveedor por ID
                        ResultSet rsProveedor = stmtProveedor.executeQuery();

                        String proveedorEmail = "";
                        if (rsProveedor.next()) {
                            proveedorEmail = rsProveedor.getString("Correo_e");
                        }

// Generar el PDF
                        File pdfFile = new File("Pedido_" + idPedido + ".pdf");
                        generatePDF(idPedido, proveedorSeleccionado.getNombre(), productoSeleccionado.getNombre(), cantidad, montoTotal, fechaPedido);

// Enviar el correo electrónico con el PDF adjunto
                        if (!proveedorEmail.isEmpty()) {
                            sendEmailWithAttachment(proveedorEmail, pdfFile);
                        }

                    }
                    tareasPanel.addTask("Pedido ID: " + idPedido
                            + " - Proveedor: " + proveedorSeleccionado.getNombre()
                            + " - Producto: " + productoSeleccionado.getNombre()
                            + " - Cantidad: " + cantidad);

                    JOptionPane.showMessageDialog(this, "Pedido agregado exitosamente.");

                }
            }

            // Confirmar la transacción
            con.commit();
            stmtPedido.close();
            con.close();

        } catch (SQLException e) {

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "La cantidad debe ser un número válido.");
        }
    }//GEN-LAST:event_RealizarPedActionPerformed
    private void generatePDF(int idPedido, String proveedor, String producto, int cantidad, double montoTotal, Date fechaPedido) {
        try {
            // Crear documento PDF
            Document document = new Document(PageSize.A4);
            PdfWriter.getInstance(document, new FileOutputStream("Pedido_" + idPedido + ".pdf"));

            document.open();

            // Título del documento
            Font titleFont = new Font(Font.FontFamily.HELVETICA, 18, Font.BOLD);
            Paragraph title = new Paragraph("Orden de Pedido", titleFont);
            title.setAlignment(Element.ALIGN_CENTER);
            document.add(title);

            // Línea divisoria
            document.add(new LineSeparator());

            // Información de la empresa
            Font infoFont = new Font(Font.FontFamily.HELVETICA, 12, Font.NORMAL);
            Paragraph companyInfo = new Paragraph(
                    "CyberAction\n"
                    + "Calle Ficticia 123, Ciudad, País\n"
                    + "Teléfono: (123) 456-7890\n\n",
                    infoFont
            );
            companyInfo.setAlignment(Element.ALIGN_LEFT);
            document.add(companyInfo);

            // Información del pedido
            Font sectionFont = new Font(Font.FontFamily.HELVETICA, 12, Font.BOLD);
            document.add(new Paragraph("Detalles del Pedido", sectionFont));

            // Tabla de información principal
            PdfPTable summaryTable = new PdfPTable(2);
            summaryTable.setWidthPercentage(100);
            summaryTable.setSpacingBefore(10f);
            summaryTable.setSpacingAfter(10f);

            // Añadir celdas de resumen
            summaryTable.addCell("ID Pedido:");
            summaryTable.addCell(String.valueOf(idPedido));
            summaryTable.addCell("Fecha del Pedido:");
            summaryTable.addCell(new SimpleDateFormat("dd/MM/yyyy").format(fechaPedido));
            summaryTable.addCell("Proveedor:");
            summaryTable.addCell(proveedor);

            document.add(summaryTable);

            // Tabla de productos
            Paragraph productDetails = new Paragraph("Productos Solicitados", sectionFont);
            productDetails.setSpacingBefore(10f);
            productDetails.setSpacingAfter(10f);
            document.add(productDetails);

            PdfPTable productTable = new PdfPTable(4); // 4 columnas: Producto, Cantidad, Precio Unitario, Total
            productTable.setWidthPercentage(100);

            // Añadir cabecera
            Font tableHeaderFont = new Font(Font.FontFamily.HELVETICA, 12, Font.BOLD);
            PdfPCell header1 = new PdfPCell(new Phrase("Producto", tableHeaderFont));
            PdfPCell header2 = new PdfPCell(new Phrase("Cantidad", tableHeaderFont));
            PdfPCell header3 = new PdfPCell(new Phrase("Precio Unitario", tableHeaderFont));
            PdfPCell header4 = new PdfPCell(new Phrase("Total", tableHeaderFont));

            header1.setHorizontalAlignment(Element.ALIGN_CENTER);
            header2.setHorizontalAlignment(Element.ALIGN_CENTER);
            header3.setHorizontalAlignment(Element.ALIGN_CENTER);
            header4.setHorizontalAlignment(Element.ALIGN_CENTER);

            productTable.addCell(header1);
            productTable.addCell(header2);
            productTable.addCell(header3);
            productTable.addCell(header4);

            // Añadir datos del producto
            productTable.addCell(producto);
            productTable.addCell(String.valueOf(cantidad));
            productTable.addCell(String.format("$%.2f", montoTotal / cantidad));
            productTable.addCell(String.format("$%.2f", montoTotal));

            document.add(productTable);

            // Espacio final
            document.add(new Paragraph(" "));
            document.add(new Paragraph("Gracias por atender este pedido a la brevedad.", infoFont));

            // Cerrar documento
            document.close();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al generar el PDF: " + e.getMessage());
        }
    }

    private void VerHisPedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VerHisPedActionPerformed
        VerPedidos vf = new VerPedidos();
        vf.setVisible(true); // Mostrar el frame de MenuGerente
        this.dispose(); // Cerrar el frame actual
    }//GEN-LAST:event_VerHisPedActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PedidoF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PedidoF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PedidoF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PedidoF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PedidoF().setVisible(true);
            }
        });
    }

    private void cargarProveedores() {
        String url = "jdbc:postgresql://localhost:5432/Papeleria";
        String user = "postgres";
        String password = "9656";

        try (Connection conexion = DriverManager.getConnection(url, user, password); Statement stmt = conexion.createStatement()) {

            // Cambia el esquema de trabajo al de la aplicación
            stmt.execute("SET search_path TO ciber_action");

            // Consulta SQL para cargar proveedores
            String sql = "SELECT Id_prov, Nombre, Telefono, Correo_e, Direccion, RFC FROM Proveedor";
            ResultSet rs = stmt.executeQuery(sql);

            DefaultComboBoxModel<Proveedor> modelo = new DefaultComboBoxModel<>();
            while (rs.next()) {
                int idProv = rs.getInt("Id_prov");
                String nombre = rs.getString("Nombre");
                String telefono = rs.getString("Telefono");
                String correo = rs.getString("Correo_e");
                String direccion = rs.getString("Direccion");
                String rfc = rs.getString("RFC");
                modelo.addElement(new Proveedor(idProv, nombre, telefono, correo, direccion, rfc));
            }
            comboBoxProveedores.setModel(modelo);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error al cargar proveedores: " + e.getMessage());
        }
    }

    private void cargarProductos() {
        String url = "jdbc:postgresql://localhost:5432/Papeleria";
        String user = "postgres";
        String password = "9656";

        try (Connection conexion = DriverManager.getConnection(url, user, password); Statement stmt = conexion.createStatement()) {

            // Cambia el esquema de trabajo al de la aplicación
            stmt.execute("SET search_path TO ciber_action");

            // Consulta SQL para cargar productos
            String sql = "SELECT Id_prod, Nombre FROM Producto";
            ResultSet rs = stmt.executeQuery(sql);

            DefaultComboBoxModel<Producto> modelo = new DefaultComboBoxModel<>();
            while (rs.next()) {
                int idProd = rs.getInt("Id_prod");
                String nombre = rs.getString("Nombre");
                modelo.addElement(new Producto(idProd, nombre));
            }
            comboBoxProductos.setModel(modelo);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error al cargar productos: " + e.getMessage());
        }
    }

    private void sendEmailWithAttachment(String recipientEmail, File attachmentFile) {
        try {
            // Configuración de las propiedades para el servidor SMTP
            Properties props = new Properties();
            props.put("mail.smtp.host", "smtp.gmail.com"); // Cambia por tu servidor SMTP
            props.put("mail.smtp.port", "587"); // Puerto para STARTTLS
            props.put("mail.smtp.starttls.enable", "true"); // Habilitar STARTTLS
            props.put("mail.smtp.auth", "true"); // Activar autenticación
            props.put("mail.smtp.ssl.trust", "smtp.gmail.com"); // Desactivar la validación del certificado SSL

            // Crear una sesión con autenticación
            Session session = Session.getInstance(props, new javax.mail.Authenticator() {
                protected PasswordAuthentication getPasswordAuthentication() {
                    return new PasswordAuthentication("julianmartinezguzman108@gmail.com", "gnqu xzay vyjy lqln"); // Cambia con tus credenciales
                }
            });

            // Crear un mensaje de correo
            Message message = new MimeMessage(session);
            message.setFrom(new InternetAddress("julianmartinezguzman108@gmail.com")); // Remitente
            message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(recipientEmail)); // Destinatario
            message.setSubject("Confirmación de Pedido"); // Asunto del correo

            // Crear el cuerpo del correo
            MimeBodyPart textPart = new MimeBodyPart();
            textPart.setText("Estimado proveedor,\n\nAdjuntamos el pedido correspondiente. Por favor, revise los detalles y confirme la recepción.\n\nGracias.\n\nAtentamente,\nCyberAction");

            // Adjuntar el archivo PDF
            MimeBodyPart attachmentPart = new MimeBodyPart();
            attachmentPart.attachFile(attachmentFile);

            // Combinar las partes en un mensaje
            Multipart multipart = new MimeMultipart();
            multipart.addBodyPart(textPart);
            multipart.addBodyPart(attachmentPart);

            message.setContent(multipart);

            // Enviar el mensaje
            Transport.send(message);

            JOptionPane.showMessageDialog(null, "Correo enviado exitosamente a: " + recipientEmail);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error al enviar el correo: " + e.getMessage());
        }
    }

    public class Proveedor {

        private int idProv;
        private String nombre;
        private String telefono;
        private String correo;
        private String direccion;
        private String rfc;

        // Constructor
        public Proveedor(int idProv, String nombre, String telefono, String correo, String direccion, String rfc) {
            this.idProv = idProv;
            this.nombre = nombre;
            this.telefono = telefono;
            this.correo = correo;
            this.direccion = direccion;
            this.rfc = rfc;
        }

        // Getters
        public int getId_prov() {
            return idProv;
        }

        public String getNombre() {
            return nombre;
        }

        public String getTelefono() {
            return telefono;
        }

        public String getCorreo() {
            return correo;
        }

        public String getDireccion() {
            return direccion;
        }

        public String getRfc() {
            return rfc;
        }

        @Override
        public String toString() {
            return nombre; // Esto es lo que se mostrará en el JComboBox
        }
    }

    class Producto {

        private int id_prod;
        private String nombre;

        public Producto(int id_prod, String nombre) {
            this.id_prod = id_prod;
            this.nombre = nombre;
        }

        public int getId_prod() {
            return id_prod;
        }

        public String getNombre() {
            return nombre;
        }

        @Override
        public String toString() {
            return nombre; // Para mostrar el nombre en el combo box
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton RealizarPed;
    private javax.swing.JButton Regresarbutt;
    private javax.swing.JButton VerHisPed;
    private javax.swing.JTextField cantidadTextField;
    private javax.swing.JComboBox<Producto> comboBoxProductos;
    private javax.swing.JComboBox<Proveedor> comboBoxProveedores;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private componentelistatareas.ListaTareas tareasPanel;
    // End of variables declaration//GEN-END:variables
}
